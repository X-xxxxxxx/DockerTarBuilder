name: x86-64 Pull and Save Docker Image

on:
  workflow_dispatch:
    inputs:
      docker_images:
        description: '输入镜像名称（英文逗号分隔）'
        required: true
        default: 'pennlinc/qsiprep:1.0.0'

jobs:
  pull_and_package:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Clean up Docker
        run: |
          docker system prune -a -f
          docker volume prune -f

      - name: Install Core Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y coreutils docker.io pigz

      - name: Process Images with Split
        run: |
          set -eo pipefail
          images="${{ github.event.inputs.docker_images }}"
          echo "输入的镜像列表: $images"
          
          if [[ -z "$images" ]]; then
            echo "错误: 未提供镜像名称"
            exit 1
          fi

          IFS=',' read -r -a image_array <<< "$images"
          echo "解析后的镜像数组: ${image_array[*]}"
          
          output_dir="$GITHUB_WORKSPACE/docker-images"
          mkdir -p "$output_dir"
          echo "使用方法: cat *.part.* > full.tar.gz" > "$output_dir/README.txt"

          for image in "${image_array[@]}"; do
            echo "==== 处理镜像: $image ===="
            
            # 验证镜像名称非空
            if [[ -z "$image" ]]; then
              echo "警告: 跳过空镜像名称"
              continue
            fi

            # 拉取镜像
            docker pull --platform linux/amd64 "$image"

            # 生成安全文件名并验证
            safe_name=$(echo "$image" | sed 's/[^a-zA-Z0-9._-]/_/g')
            if [[ -z "$safe_name" ]]; then
              echo "错误: 无法生成安全文件名"
              exit 1
            fi

            # 流式处理：save → pigz → split
            docker save "$image" | \
              pigz -9 | \
              split -d -b 1500M - "$output_dir/${safe_name}-amd64.tar.gz.part."

            # 清理
            docker rmi "$image"
          done

      - name: Upload Split Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: split-docker-images
          path: |
            docker-images/*
          retention-days: 1
