name: Get-AMD64-Docker-Images-Release

on:
  workflow_dispatch:
    inputs:
      docker_images:
        description: '请填写docker镜像名称,多个用英文逗号分开'
        required: true
        default: 'alpine:latest,alpine/curl,busybox:stable-glibc'

jobs:
  pull_and_package:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cleanup Previous Data
        run: |
          # 清理所有Docker资源
          docker system prune -a -f --volumes
          # 删除所有可能残留的旧文件
          sudo rm -rf /var/lib/docker/tmp/*
          sudo rm -rf "$GITHUB_WORKSPACE/docker-images"

      - name: Pull Docker Images and Package
        run: |
          set -eo pipefail
          images="${{ github.event.inputs.docker_images }}"
          IFS=',' read -r -a image_array <<< "$images"
          
          output_dir="$GITHUB_WORKSPACE/docker-images"
          mkdir -p "$output_dir"

          for image in "${image_array[@]}"; do
            echo "==== Processing $image ===="
            
            # 强制删除旧镜像
            docker rmi "$image" --force 2>/dev/null || true

            # 拉取镜像并添加重试
            for i in {1..3}; do
              if docker pull --platform linux/amd64 "$image"; then
                break
              else
                if [ $i -eq 3 ]; then exit 1; fi
                sleep $((i*5))
              fi
            done

            # 生成安全文件名
            safe_name=$(echo "$image" | sed 's/[^a-zA-Z0-9._-]/_/g')
            tar_path="$output_dir/${safe_name}-amd64.tar"

            # 保存并立即压缩分割
            docker save -o "$tar_path" "$image"
            
            # 使用pigz多线程压缩并分卷（每个分卷1.8GB）
            echo "Compressing and splitting..."
            tar cf - "$tar_path" | \
            pigz -9 | \
            split -d -b 1800M - "${tar_path}.gz.part."

            # 立即清理中间文件
            rm -f "$tar_path" 
            
            # 删除已处理的镜像释放空间
            docker rmi "$image" --force
          done

      - name: Create Release with Split Files
        uses: softprops/action-gh-release@v2.1.0
        with:
          tag_name: docker-amd64-$(date +%Y%m%d%H%M)
          name: Docker AMD64 Images - $(date +'%Y-%m-%d %H:%M')
          body: |
            ### 合并说明
            1. 下载所有同名 `.part.*` 文件
            2. 合并命令：
            ```bash
            cat filename.tar.gz.part.* > filename.tar.gz
            md5sum filename.tar.gz # 验证完整性
            ```
            3. 加载镜像：
            ```bash
            docker load -i filename.tar.gz
            ```
          files: |
            docker-images/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Post Cleanup
        if: always()
        run: |
          docker system prune -a -f
          rm -rf docker-images/
